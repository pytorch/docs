torch.dynamic-shape
=======================
cond_branch_class_method
^^^^^^^^^^^^^^^^^^^^^^^^

.. note::

    Tags: :doc:`torch.dynamic-shape <torch.dynamic-shape>`, :doc:`torch.cond <torch.cond>`

    Support Level: SUPPORTED

Original source code:

.. code-block:: python

    import torch
    
    from functorch.experimental.control_flow import cond
    
    
    class MySubModule(torch.nn.Module):
        def foo(self, x):
            return x.cos()
    
        def forward(self, x):
            return self.foo(x)
    
    
    class CondBranchClassMethod(torch.nn.Module):
        """
        The branch functions (`true_fn` and `false_fn`) passed to cond() must follow these rules:
          - both branches must take the same args, which must also match the branch args passed to cond.
          - both branches must return a single tensor
          - returned tensor must have the same tensor metadata, e.g. shape and dtype
          - branch function can be free function, nested function, lambda, class methods
          - branch function can not have closure variables
          - no inplace mutations on inputs or global variables
    
    
        This example demonstrates using class method in cond().
    
        NOTE: If the `pred` is test on a dim with batch size < 2, it will be specialized.
        """
    
        def __init__(self):
            super().__init__()
            self.subm = MySubModule()
    
        def bar(self, x):
            return x.sin()
    
        def forward(self, x):
            return cond(x.shape[0] <= 2, self.subm.forward, self.bar, [x])
    

Result:

.. code-block::

    ExportedProgram:
        class GraphModule(torch.nn.Module):
            def forward(self, x: "f32[3]"):
                    true_graph_0 = self.true_graph_0
                false_graph_0 = self.false_graph_0
                conditional = torch.ops.higher_order.cond(False, true_graph_0, false_graph_0, [x]);  true_graph_0 = false_graph_0 = x = None
                getitem: "f32[3]" = conditional[0];  conditional = None
                return (getitem,)
                
            class <lambda>(torch.nn.Module):
                def forward(self, x: "f32[3]"):
                            cos: "f32[3]" = torch.ops.aten.cos.default(x);  x = None
                    return (cos,)
                    
            class <lambda>(torch.nn.Module):
                def forward(self, x: "f32[3]"):
                            sin: "f32[3]" = torch.ops.aten.sin.default(x);  x = None
                    return (sin,)
                    
    Graph signature: ExportGraphSignature(input_specs=[InputSpec(kind=<InputKind.USER_INPUT: 1>, arg=TensorArgument(name='x'), target=None, persistent=None)], output_specs=[OutputSpec(kind=<OutputKind.USER_OUTPUT: 1>, arg=TensorArgument(name='getitem'), target=None)])
    Range constraints: {}
    


cond_branch_nested_function
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. note::

    Tags: :doc:`torch.dynamic-shape <torch.dynamic-shape>`, :doc:`torch.cond <torch.cond>`

    Support Level: SUPPORTED

Original source code:

.. code-block:: python

    import torch
    
    from functorch.experimental.control_flow import cond
    
    
    class CondBranchNestedFunction(torch.nn.Module):
        """
        The branch functions (`true_fn` and `false_fn`) passed to cond() must follow these rules:
          - both branches must take the same args, which must also match the branch args passed to cond.
          - both branches must return a single tensor
          - returned tensor must have the same tensor metadata, e.g. shape and dtype
          - branch function can be free function, nested function, lambda, class methods
          - branch function can not have closure variables
          - no inplace mutations on inputs or global variables
    
        This example demonstrates using nested function in cond().
    
        NOTE: If the `pred` is test on a dim with batch size < 2, it will be specialized.
        """
        def __init__(self):
            super().__init__()
    
        def forward(self, x):
            def true_fn(x):
                def inner_true_fn(y):
                    return x + y
    
                return inner_true_fn(x)
    
            def false_fn(x):
                def inner_false_fn(y):
                    return x - y
    
                return inner_false_fn(x)
    
            return cond(x.shape[0] < 10, true_fn, false_fn, [x])
    

Result:

.. code-block::

    ExportedProgram:
        class GraphModule(torch.nn.Module):
            def forward(self, x: "f32[3]"):
                    true_graph_0 = self.true_graph_0
                false_graph_0 = self.false_graph_0
                conditional = torch.ops.higher_order.cond(True, true_graph_0, false_graph_0, [x]);  true_graph_0 = false_graph_0 = x = None
                getitem: "f32[3]" = conditional[0];  conditional = None
                return (getitem,)
                
            class <lambda>(torch.nn.Module):
                def forward(self, x: "f32[3]"):
                            add: "f32[3]" = torch.ops.aten.add.Tensor(x, x);  x = None
                    return (add,)
                    
            class <lambda>(torch.nn.Module):
                def forward(self, x: "f32[3]"):
                            sub: "f32[3]" = torch.ops.aten.sub.Tensor(x, x);  x = None
                    return (sub,)
                    
    Graph signature: ExportGraphSignature(input_specs=[InputSpec(kind=<InputKind.USER_INPUT: 1>, arg=TensorArgument(name='x'), target=None, persistent=None)], output_specs=[OutputSpec(kind=<OutputKind.USER_OUTPUT: 1>, arg=TensorArgument(name='getitem'), target=None)])
    Range constraints: {}
    


cond_branch_nonlocal_variables
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. note::

    Tags: :doc:`torch.dynamic-shape <torch.dynamic-shape>`, :doc:`torch.cond <torch.cond>`

    Support Level: SUPPORTED

Original source code:

.. code-block:: python

    import torch
    
    from functorch.experimental.control_flow import cond
    
    
    class CondBranchNonlocalVariables(torch.nn.Module):
        """
        The branch functions (`true_fn` and `false_fn`) passed to cond() must follow these rules:
        - both branches must take the same args, which must also match the branch args passed to cond.
        - both branches must return a single tensor
        - returned tensor must have the same tensor metadata, e.g. shape and dtype
        - branch function can be free function, nested function, lambda, class methods
        - branch function can not have closure variables
        - no inplace mutations on inputs or global variables
    
        This example demonstrates how to rewrite code to avoid capturing closure variables in branch functions.
    
        The code below will not work because capturing closure variables is not supported.
        ```
        my_tensor_var = x + 100
        my_primitive_var = 3.14
    
        def true_fn(y):
            nonlocal my_tensor_var, my_primitive_var
            return y + my_tensor_var + my_primitive_var
    
        def false_fn(y):
            nonlocal my_tensor_var, my_primitive_var
            return y - my_tensor_var - my_primitive_var
    
        return cond(x.shape[0] > 5, true_fn, false_fn, [x])
        ```
    
        NOTE: If the `pred` is test on a dim with batch size < 2, it will be specialized.
        """
    
        def __init__(self):
            super().__init__()
    
        def forward(self, x):
            my_tensor_var = x + 100
            my_primitive_var = 3.14
    
            def true_fn(x, y, z):
                return x + y + z
    
            def false_fn(x, y, z):
                return x - y - z
    
            return cond(
                x.shape[0] > 5,
                true_fn,
                false_fn,
                [x, my_tensor_var, torch.tensor(my_primitive_var)],
            )
    

Result:

.. code-block::

    ExportedProgram:
        class GraphModule(torch.nn.Module):
            def forward(self, c_lifted_tensor_0: "f32[]", x: "f32[6]"):
                    add: "f32[6]" = torch.ops.aten.add.Tensor(x, 100)
                
                    lift_fresh_copy: "f32[]" = torch.ops.aten.lift_fresh_copy.default(c_lifted_tensor_0);  c_lifted_tensor_0 = None
                
                    true_graph_0 = self.true_graph_0
                false_graph_0 = self.false_graph_0
                conditional = torch.ops.higher_order.cond(True, true_graph_0, false_graph_0, [x, add, lift_fresh_copy]);  true_graph_0 = false_graph_0 = x = add = lift_fresh_copy = None
                getitem: "f32[6]" = conditional[0];  conditional = None
                return (getitem,)
                
            class <lambda>(torch.nn.Module):
                def forward(self, x: "f32[6]", add: "f32[6]", lift_fresh_copy: "f32[]"):
                            add_1: "f32[6]" = torch.ops.aten.add.Tensor(x, add);  x = add = None
                    add_2: "f32[6]" = torch.ops.aten.add.Tensor(add_1, lift_fresh_copy);  add_1 = lift_fresh_copy = None
                    return (add_2,)
                    
            class <lambda>(torch.nn.Module):
                def forward(self, x: "f32[6]", add: "f32[6]", lift_fresh_copy: "f32[]"):
                            sub: "f32[6]" = torch.ops.aten.sub.Tensor(x, add);  x = add = None
                    sub_1: "f32[6]" = torch.ops.aten.sub.Tensor(sub, lift_fresh_copy);  sub = lift_fresh_copy = None
                    return (sub_1,)
                    
    Graph signature: ExportGraphSignature(input_specs=[InputSpec(kind=<InputKind.CONSTANT_TENSOR: 4>, arg=TensorArgument(name='c_lifted_tensor_0'), target='lifted_tensor_0', persistent=None), InputSpec(kind=<InputKind.USER_INPUT: 1>, arg=TensorArgument(name='x'), target=None, persistent=None)], output_specs=[OutputSpec(kind=<OutputKind.USER_OUTPUT: 1>, arg=TensorArgument(name='getitem'), target=None)])
    Range constraints: {}
    


cond_operands
^^^^^^^^^^^^^

.. note::

    Tags: :doc:`torch.dynamic-shape <torch.dynamic-shape>`, :doc:`torch.cond <torch.cond>`

    Support Level: SUPPORTED

Original source code:

.. code-block:: python

    import torch
    
    from torch.export import Dim
    from functorch.experimental.control_flow import cond
    
    x = torch.randn(3, 2)
    y = torch.randn(2)
    dim0_x = Dim("dim0_x")
    
    class CondOperands(torch.nn.Module):
        """
        The operands passed to cond() must be:
        - a list of tensors
        - match arguments of `true_fn` and `false_fn`
    
        NOTE: If the `pred` is test on a dim with batch size < 2, it will be specialized.
        """
    
        def __init__(self):
            super().__init__()
    
        def forward(self, x, y):
            def true_fn(x, y):
                return x + y
    
            def false_fn(x, y):
                return x - y
    
            return cond(x.shape[0] > 2, true_fn, false_fn, [x, y])
    

Result:

.. code-block::

    ExportedProgram:
        class GraphModule(torch.nn.Module):
            def forward(self, x: "f32[s0, 2]", y: "f32[2]"):
                    sym_size_int: "Sym(s0)" = torch.ops.aten.sym_size.int(x, 0)
                gt: "Sym(s0 > 2)" = sym_size_int > 2;  sym_size_int = None
                true_graph_0 = self.true_graph_0
                false_graph_0 = self.false_graph_0
                conditional = torch.ops.higher_order.cond(gt, true_graph_0, false_graph_0, [x, y]);  gt = true_graph_0 = false_graph_0 = x = y = None
                getitem: "f32[s0, 2]" = conditional[0];  conditional = None
                return (getitem,)
                
            class <lambda>(torch.nn.Module):
                def forward(self, x: "f32[s0, 2]", y: "f32[2]"):
                            add: "f32[s0, 2]" = torch.ops.aten.add.Tensor(x, y);  x = y = None
                    return (add,)
                    
            class <lambda>(torch.nn.Module):
                def forward(self, x: "f32[s0, 2]", y: "f32[2]"):
                            sub: "f32[s0, 2]" = torch.ops.aten.sub.Tensor(x, y);  x = y = None
                    return (sub,)
                    
    Graph signature: ExportGraphSignature(input_specs=[InputSpec(kind=<InputKind.USER_INPUT: 1>, arg=TensorArgument(name='x'), target=None, persistent=None), InputSpec(kind=<InputKind.USER_INPUT: 1>, arg=TensorArgument(name='y'), target=None, persistent=None)], output_specs=[OutputSpec(kind=<OutputKind.USER_OUTPUT: 1>, arg=TensorArgument(name='getitem'), target=None)])
    Range constraints: {s0: ValueRanges(lower=0, upper=9223372036854775806, is_bool=False)}
    


cond_predicate
^^^^^^^^^^^^^^

.. note::

    Tags: :doc:`torch.dynamic-shape <torch.dynamic-shape>`, :doc:`torch.cond <torch.cond>`

    Support Level: SUPPORTED

Original source code:

.. code-block:: python

    import torch
    
    from functorch.experimental.control_flow import cond
    
    
    class CondPredicate(torch.nn.Module):
        """
        The conditional statement (aka predicate) passed to cond() must be one of the following:
          - torch.Tensor with a single element
          - boolean expression
    
        NOTE: If the `pred` is test on a dim with batch size < 2, it will be specialized.
        """
    
        def __init__(self):
            super().__init__()
    
        def forward(self, x):
            pred = x.dim() > 2 and x.shape[2] > 10
    
            return cond(pred, lambda x: x.cos(), lambda y: y.sin(), [x])
    

Result:

.. code-block::

    ExportedProgram:
        class GraphModule(torch.nn.Module):
            def forward(self, x: "f32[6, 4, 3]"):
                    true_graph_0 = self.true_graph_0
                false_graph_0 = self.false_graph_0
                conditional = torch.ops.higher_order.cond(False, true_graph_0, false_graph_0, [x]);  true_graph_0 = false_graph_0 = x = None
                getitem: "f32[6, 4, 3]" = conditional[0];  conditional = None
                return (getitem,)
                
            class <lambda>(torch.nn.Module):
                def forward(self, x: "f32[6, 4, 3]"):
                            cos: "f32[6, 4, 3]" = torch.ops.aten.cos.default(x);  x = None
                    return (cos,)
                    
            class <lambda>(torch.nn.Module):
                def forward(self, x: "f32[6, 4, 3]"):
                            sin: "f32[6, 4, 3]" = torch.ops.aten.sin.default(x);  x = None
                    return (sin,)
                    
    Graph signature: ExportGraphSignature(input_specs=[InputSpec(kind=<InputKind.USER_INPUT: 1>, arg=TensorArgument(name='x'), target=None, persistent=None)], output_specs=[OutputSpec(kind=<OutputKind.USER_OUTPUT: 1>, arg=TensorArgument(name='getitem'), target=None)])
    Range constraints: {}
    


dynamic_shape_constructor
^^^^^^^^^^^^^^^^^^^^^^^^^

.. note::

    Tags: :doc:`torch.dynamic-shape <torch.dynamic-shape>`

    Support Level: SUPPORTED

Original source code:

.. code-block:: python

    import torch
    
    
    
    class DynamicShapeConstructor(torch.nn.Module):
        """
        Tensor constructors should be captured with dynamic shape inputs rather
        than being baked in with static shape.
        """
        def __init__(self):
            super().__init__()
    
        def forward(self, x):
            return torch.zeros(x.shape[0] * 2)
    

Result:

.. code-block::

    ExportedProgram:
        class GraphModule(torch.nn.Module):
            def forward(self, x: "f32[3, 2]"):
                    zeros: "f32[6]" = torch.ops.aten.zeros.default([6], device = device(type='cpu'), pin_memory = False)
                return (zeros,)
                
    Graph signature: ExportGraphSignature(input_specs=[InputSpec(kind=<InputKind.USER_INPUT: 1>, arg=TensorArgument(name='x'), target=None, persistent=None)], output_specs=[OutputSpec(kind=<OutputKind.USER_OUTPUT: 1>, arg=TensorArgument(name='zeros'), target=None)])
    Range constraints: {}
    


dynamic_shape_if_guard
^^^^^^^^^^^^^^^^^^^^^^

.. note::

    Tags: :doc:`python.control-flow <python.control-flow>`, :doc:`torch.dynamic-shape <torch.dynamic-shape>`

    Support Level: SUPPORTED

Original source code:

.. code-block:: python

    import torch
    
    
    
    class DynamicShapeIfGuard(torch.nn.Module):
        """
        `if` statement with backed dynamic shape predicate will be specialized into
        one particular branch and generate a guard. However, export will fail if the
        the dimension is marked as dynamic shape from higher level API.
        """
    
        def forward(self, x):
            if x.shape[0] == 3:
                return x.cos()
    
            return x.sin()
    

Result:

.. code-block::

    ExportedProgram:
        class GraphModule(torch.nn.Module):
            def forward(self, x: "f32[3, 2, 2]"):
                    cos: "f32[3, 2, 2]" = torch.ops.aten.cos.default(x);  x = None
                return (cos,)
                
    Graph signature: ExportGraphSignature(input_specs=[InputSpec(kind=<InputKind.USER_INPUT: 1>, arg=TensorArgument(name='x'), target=None, persistent=None)], output_specs=[OutputSpec(kind=<OutputKind.USER_OUTPUT: 1>, arg=TensorArgument(name='cos'), target=None)])
    Range constraints: {}
    


dynamic_shape_map
^^^^^^^^^^^^^^^^^

.. note::

    Tags: :doc:`torch.map <torch.map>`, :doc:`torch.dynamic-shape <torch.dynamic-shape>`

    Support Level: SUPPORTED

Original source code:

.. code-block:: python

    import torch
    
    from functorch.experimental.control_flow import map
    
    
    class DynamicShapeMap(torch.nn.Module):
        """
        functorch map() maps a function over the first tensor dimension.
        """
    
        def __init__(self):
            super().__init__()
    
        def forward(self, xs, y):
            def body(x, y):
                return x + y
    
            return map(body, xs, y)
    

Result:

.. code-block::

    ExportedProgram:
        class GraphModule(torch.nn.Module):
            def forward(self, xs: "f32[3, 2]", y: "f32[2]"):
                    body_graph_0 = self.body_graph_0
                map_impl = torch.ops.higher_order.map_impl(body_graph_0, [xs], [y]);  body_graph_0 = xs = y = None
                getitem: "f32[3, 2]" = map_impl[0];  map_impl = None
                return (getitem,)
                
            class <lambda>(torch.nn.Module):
                def forward(self, xs: "f32[2]", y: "f32[2]"):
                            add: "f32[2]" = torch.ops.aten.add.Tensor(xs, y);  xs = y = None
                    return (add,)
                    
    Graph signature: ExportGraphSignature(input_specs=[InputSpec(kind=<InputKind.USER_INPUT: 1>, arg=TensorArgument(name='xs'), target=None, persistent=None), InputSpec(kind=<InputKind.USER_INPUT: 1>, arg=TensorArgument(name='y'), target=None, persistent=None)], output_specs=[OutputSpec(kind=<OutputKind.USER_OUTPUT: 1>, arg=TensorArgument(name='getitem'), target=None)])
    Range constraints: {}
    


dynamic_shape_round
^^^^^^^^^^^^^^^^^^^

.. note::

    Tags: :doc:`python.builtin <python.builtin>`, :doc:`torch.dynamic-shape <torch.dynamic-shape>`

    Support Level: NOT_SUPPORTED_YET

Original source code:

.. code-block:: python

    import torch
    
    from torch.export import Dim
    
    x = torch.randn(3, 2)
    dim0_x = Dim("dim0_x")
    
    class DynamicShapeRound(torch.nn.Module):
        """
        Calling round on dynamic shapes is not supported.
        """
    
        def __init__(self):
            super().__init__()
    
        def forward(self, x):
            return x[: round(x.shape[0] / 2)]
    

Result:

.. code-block::

    AssertionError: Round(dim0_x/2) <= dim0_x


dynamic_shape_slicing
^^^^^^^^^^^^^^^^^^^^^

.. note::

    Tags: :doc:`torch.dynamic-shape <torch.dynamic-shape>`

    Support Level: SUPPORTED

Original source code:

.. code-block:: python

    import torch
    
    
    
    class DynamicShapeSlicing(torch.nn.Module):
        """
        Slices with dynamic shape arguments should be captured into the graph
        rather than being baked in.
        """
    
        def __init__(self):
            super().__init__()
    
        def forward(self, x):
            return x[: x.shape[0] - 2, x.shape[1] - 1 :: 2]
    

Result:

.. code-block::

    ExportedProgram:
        class GraphModule(torch.nn.Module):
            def forward(self, x: "f32[3, 2]"):
                    slice_1: "f32[1, 2]" = torch.ops.aten.slice.Tensor(x, 0, 0, 1);  x = None
                slice_2: "f32[1, 1]" = torch.ops.aten.slice.Tensor(slice_1, 1, 1, 9223372036854775807, 2);  slice_1 = None
                return (slice_2,)
                
    Graph signature: ExportGraphSignature(input_specs=[InputSpec(kind=<InputKind.USER_INPUT: 1>, arg=TensorArgument(name='x'), target=None, persistent=None)], output_specs=[OutputSpec(kind=<OutputKind.USER_OUTPUT: 1>, arg=TensorArgument(name='slice_2'), target=None)])
    Range constraints: {}
    


dynamic_shape_view
^^^^^^^^^^^^^^^^^^

.. note::

    Tags: :doc:`torch.dynamic-shape <torch.dynamic-shape>`

    Support Level: SUPPORTED

Original source code:

.. code-block:: python

    import torch
    
    
    
    class DynamicShapeView(torch.nn.Module):
        """
        Dynamic shapes should be propagated to view arguments instead of being
        baked into the exported graph.
        """
    
        def __init__(self):
            super().__init__()
    
        def forward(self, x):
            new_x_shape = x.size()[:-1] + (2, 5)
            x = x.view(*new_x_shape)
            return x.permute(0, 2, 1)
    

Result:

.. code-block::

    ExportedProgram:
        class GraphModule(torch.nn.Module):
            def forward(self, x: "f32[10, 10]"):
                    view: "f32[10, 2, 5]" = torch.ops.aten.view.default(x, [10, 2, 5]);  x = None
                
                    permute: "f32[10, 5, 2]" = torch.ops.aten.permute.default(view, [0, 2, 1]);  view = None
                return (permute,)
                
    Graph signature: ExportGraphSignature(input_specs=[InputSpec(kind=<InputKind.USER_INPUT: 1>, arg=TensorArgument(name='x'), target=None, persistent=None)], output_specs=[OutputSpec(kind=<OutputKind.USER_OUTPUT: 1>, arg=TensorArgument(name='permute'), target=None)])
    Range constraints: {}
    


list_contains
^^^^^^^^^^^^^

.. note::

    Tags: :doc:`python.data-structure <python.data-structure>`, :doc:`python.assert <python.assert>`, :doc:`torch.dynamic-shape <torch.dynamic-shape>`

    Support Level: SUPPORTED

Original source code:

.. code-block:: python

    import torch
    
    
    
    class ListContains(torch.nn.Module):
        """
        List containment relation can be checked on a dynamic shape or constants.
        """
        def __init__(self):
            super().__init__()
    
        def forward(self, x):
            assert x.size(-1) in [6, 2]
            assert x.size(0) not in [4, 5, 6]
            assert "monkey" not in ["cow", "pig"]
            return x + x
    

Result:

.. code-block::

    ExportedProgram:
        class GraphModule(torch.nn.Module):
            def forward(self, x: "f32[3, 2]"):
                    add: "f32[3, 2]" = torch.ops.aten.add.Tensor(x, x);  x = None
                return (add,)
                
    Graph signature: ExportGraphSignature(input_specs=[InputSpec(kind=<InputKind.USER_INPUT: 1>, arg=TensorArgument(name='x'), target=None, persistent=None)], output_specs=[OutputSpec(kind=<OutputKind.USER_OUTPUT: 1>, arg=TensorArgument(name='add'), target=None)])
    Range constraints: {}
    


scalar_output
^^^^^^^^^^^^^

.. note::

    Tags: :doc:`torch.dynamic-shape <torch.dynamic-shape>`

    Support Level: SUPPORTED

Original source code:

.. code-block:: python

    import torch
    
    from torch.export import Dim
    
    x = torch.randn(3, 2)
    dim1_x = Dim("dim1_x")
    
    class ScalarOutput(torch.nn.Module):
        """
        Returning scalar values from the graph is supported, in addition to Tensor
        outputs. Symbolic shapes are captured and rank is specialized.
        """
        def __init__(self):
            super().__init__()
    
        def forward(self, x):
            return x.shape[1] + 1
    

Result:

.. code-block::

    ExportedProgram:
        class GraphModule(torch.nn.Module):
            def forward(self, x: "f32[3, s0]"):
                # No stacktrace found for following nodes
                sym_size_int: "Sym(s0)" = torch.ops.aten.sym_size.int(x, 1);  x = None
                add: "Sym(s0 + 1)" = sym_size_int + 1;  sym_size_int = None
                return (add,)
                
    Graph signature: ExportGraphSignature(input_specs=[InputSpec(kind=<InputKind.USER_INPUT: 1>, arg=TensorArgument(name='x'), target=None, persistent=None)], output_specs=[OutputSpec(kind=<OutputKind.USER_OUTPUT: 1>, arg=SymIntArgument(name='add'), target=None)])
    Range constraints: {s0: ValueRanges(lower=0, upper=9223372036854775806, is_bool=False)}
    
