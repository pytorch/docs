torch.map
=============
dynamic_shape_map
^^^^^^^^^^^^^^^^^

.. note::

    Tags: :doc:`torch.map <torch.map>`, :doc:`torch.dynamic-shape <torch.dynamic-shape>`

    Support Level: SUPPORTED

Original source code:

.. code-block:: python

    # mypy: allow-untyped-defs
    import torch
    
    from functorch.experimental.control_flow import map
    
    
    class DynamicShapeMap(torch.nn.Module):
        """
        functorch map() maps a function over the first tensor dimension.
        """
    
        def __init__(self):
            super().__init__()
    
        def forward(self, xs, y):
            def body(x, y):
                return x + y
    
            return map(body, xs, y)
    

Result:

.. code-block::

    ExportedProgram:
        class GraphModule(torch.nn.Module):
            def forward(self, xs: "f32[3, 2]", y: "f32[2]"):
                    body_graph_0 = self.body_graph_0
                map_impl = torch.ops.higher_order.map_impl(body_graph_0, [xs], [y]);  body_graph_0 = xs = y = None
                getitem: "f32[3, 2]" = map_impl[0];  map_impl = None
                return (getitem,)
                
            class <lambda>(torch.nn.Module):
                def forward(self, xs: "f32[2]", y: "f32[2]"):
                            add: "f32[2]" = torch.ops.aten.add.Tensor(xs, y);  xs = y = None
                    return (add,)
                    
    Graph signature: ExportGraphSignature(input_specs=[InputSpec(kind=<InputKind.USER_INPUT: 1>, arg=TensorArgument(name='xs'), target=None, persistent=None), InputSpec(kind=<InputKind.USER_INPUT: 1>, arg=TensorArgument(name='y'), target=None, persistent=None)], output_specs=[OutputSpec(kind=<OutputKind.USER_OUTPUT: 1>, arg=TensorArgument(name='getitem'), target=None)])
    Range constraints: {}
    
